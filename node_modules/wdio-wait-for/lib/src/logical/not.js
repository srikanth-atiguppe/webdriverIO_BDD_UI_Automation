"use strict";
/**
 * Negates the result of a promise
 *
 * @example
 * browser.waitUntil(not(alertIsPresent()));
 *
 * @param {!Function} expectedCondition The function to check
 *
 * @returns {!function} An expected condition that returns that returns the negated value.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.not = void 0;
function not(expectedCondition) {
    return () => __awaiter(this, void 0, void 0, function* () {
        const result = yield expectedCondition();
        return !result;
    });
}
exports.not = not;
